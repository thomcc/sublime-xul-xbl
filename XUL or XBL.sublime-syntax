%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: XUL or XBL
file_extensions:
  - xul
  - xml
scope: text.xml.xul
variables:
  name: '[[:alpha:]:_][[:alnum:]:_.-]*'
  qualified_name: '(?:([[:alpha:]_][[:alnum:]_.-]*)(:))?([[:alpha:]_][[:alnum:]_.-]*)'
  js_ident: '[_$a-zA-Z][$\w]*'
contexts:
  main:
    - match: (<\?)(xml-stylesheet|xul-overlay|xml(?!-))
      captures:
        1: punctuation.definition.tag.begin.xml.xul
        2: entity.name.tag.xml.xul
      push:
        - meta_scope: meta.tag.preprocessor.xml.xul
        - match: (\?>)
          captures:
            1: punctuation.definition.tag.end.xml.xul
            2: entity.name.tag.xml.xul
          pop: true
        - include: tag-generic-attribute
        - include: string-double-quoted
        - include: string-single-quoted
    - match: '(<!)(DOCTYPE)(?:\s+({{name}}))?'
      captures:
        1: punctuation.definition.tag.begin.xml
        2: keyword.doctype.xml
        3: variable.documentroot.xml
      push:
        - meta_scope: meta.tag.sgml.doctype.xml
        - match: \s*(>)
          captures:
            1: punctuation.definition.tag.end.xml
          pop: true
        - include: internal-subset
    - include: comment
    - include: script-tag
    - include: xbl-tags
    - include: generic-tag
    - include: entities
    - include: preprocessor

  xbl-tags:
    - match: '(?:^\s+)?(<)([gs]etter|body|(?:con|de)structor|handler)\b'
      captures:
        1: punctuation.definition.tag.begin.xml.xul
        2: entity.name.tag.localname.xml.xul
      push:
        - match: (?:(</)((?:\2))(>)(?:\s*\n)?|(/>))
          captures:
            1: punctuation.definition.tag.begin.xml.xul
            2: entity.name.tag.xml.xul
            3: punctuation.definition.tag.end.xml.xul
            4: punctuation.definition.tag.end.xml.xul
          pop: true
        - include: xbl-special-attributes
        - include: tag-stuff
        - match: (>)
          scope: punctuation.definition.tag.end.xml.xul
          push: scope:source.js
          with_prototype:
            - match: (?=</(?:\2))
              pop: true
            - include: js-extra-comments
    - match: '(?:^\s+)?(<)(field)\b'
      captures:
        1: punctuation.definition.tag.begin.xml.xul
        2: entity.name.tag.xml.xul
      push:
        - match: '(?:\s+|^)(name)\s*(=)\s*(")(?:({{js_ident}})|([^"]*?))(")'
          captures:
            1: entity.other.attribute-name.localname.xml.xul
            2: punctuation.separator.key-value.xml.xul
            3: punctuation.definition.string.begin.xml.xul
            4: variable.other.member.xml.xul
            5: invalid.illegal
            6: punctuation.definition.string.end.xml.xul
        - match: (?:(</)(field)(>)(?:\s*\n)?|(/>))
          captures:
            1: punctuation.definition.tag.begin.xml.xul
            2: entity.name.tag.xml.xul
            3: punctuation.definition.tag.end.xml.xul
            4: punctuation.definition.tag.end.xml.xul
          pop: true
        - include: xbl-special-attributes
        - include: tag-stuff
        - match: (>)
          scope: punctuation.definition.tag.end.xml.xul
          push: scope:source.js
          with_prototype:
            - match: (?=</field)
              pop: true
            - include: js-extra-comments

    - match: (<)\s*(method)\b
      captures:
        1: punctuation.definition.tag.begin.xml.xul
        2: entity.name.tag.localname.xml.xul
      push:
        - match: '(/?>)'
          captures:
            1: punctuation.definition.tag.end.xml.xul
          pop: true
        - match: '(?:\s+|^)(name)\s*(=)\s*(")(?:({{js_ident}})|([^"]*?))(")'
          captures:
            1: entity.other.attribute-name.localname.xml.xul
            2: punctuation.separator.key-value.xml.xul
            3: punctuation.definition.string.begin.xml.xul
            4: entity.name.function.xml.xul
            5: invalid.illegal
            6: punctuation.definition.string.end.xml.xul
        - include: xbl-special-attributes
        - include: tag-stuff
    - match: (<)\s*(parameter)\b
      captures:
        1: punctuation.definition.tag.begin.xml.xul
        2: entity.name.tag.localname.xml.xul
      push:
        - match: '(/?>)'
          captures: punctuation.definition.tag.end.xml.xul
          pop: true
        - match: '(?:\s+|^)(name)\s*(=)\s*(")(?:({{js_ident}})|([^"]*?))(")'
          captures:
            1: entity.other.attribute-name.localname.xml.xul
            2: punctuation.separator.key-value.xml.xul
            3: punctuation.definition.string.begin.xml.xul
            4: variable.parameter.xml.xul
            5: invalid.illegal
            6: punctuation.definition.string.end.xml.xul
        - include: tag-stuff
    - match: (<)\s*(property)\b
      captures:
        1: punctuation.definition.tag.begin.xml.xul
        2: entity.name.tag.localname.xml.xul
      push:
        - match: '(/?>)'
          captures:
            1: punctuation.definition.tag.end.xml.xul
          pop: true
        - match: '(?:\s+|^)(name)\s*(=)\s*(")(?:({{js_ident}})|([^"]*?))(")'
          captures:
            1: entity.other.attribute-name.localname.xml.xul
            2: punctuation.separator.key-value.xml.xul
            3: punctuation.definition.string.begin.xml.xul
            4: entity.name.accessor.xml.xul
            5: invalid.illegal
            6: punctuation.definition.string.end.xml.xul
        - include: xbl-special-attributes
        - include: tag-stuff
    - match: (<)\s*(implementation)\b
      captures:
        1: punctuation.definition.tag.begin.xml.xul
        2: entity.name.tag.localname.xml.xul
      push:
        - match: '(/?>)'
          captures:
            1: punctuation.definition.tag.end.xml.xul
          pop: true
        - match: '(?:\s+|^)(implements)\s*(=)\s*(")'
          captures:
            1: entity.other.attribute-name.localname.xml.xul
            2: punctuation.separator.key-value.xml.xul
            3: punctuation.definition.string.begin.xml.xul
          push:
            - match: '(")'
              captures:
                1: punctuation.definition.string.end.xml.xul
              pop: true
            - match: \b({{js_ident}})\b
              captures:
                1: support.class.xml.xul
            - match: '(,)'
              captures:
                1: punctuation.separator.xml.xul
        - include: tag-stuff

  script-tag:
    - match: '(?:^\s+)?(<)(script)\b'
      captures:
        1: punctuation.definition.tag.begin.xml.xul
        2: entity.name.tag.localname.xml.xul
      push:
        - match: (?:(</)(script)(>)(?:\s*\n)?|(/>))
          captures:
            1: punctuation.definition.tag.begin.xml.xul
            2: entity.name.tag.xml.xul
            3: punctuation.definition.tag.end.xml.xul
            4: punctuation.definition.tag.end.xml.xul
          pop: true
        - include: xbl-special-attributes
        - include: tag-stuff
        - match: (>)
          scope: punctuation.definition.tag.end.xml.xul
          push: scope:source.js
          with_prototype:
            - match: (?=</script>)
              pop: true

  generic-tag:
    - match: '(</?){{qualified_name}}([^/>\s]*)'
      captures:
        1: punctuation.definition.tag.begin.xml.xul
        2: entity.name.tag.namespace.xml.xul
        3: entity.name.tag.xml.xul punctuation.separator.namespace.xml.xul
        4: entity.name.tag.localname.xml.xul
        5: invalid.illegal.bad-tag-name.xml.xul
      push:
        - meta_scope: meta.tag.xml.xul
        - match: /?>
          scope: punctuation.definition.tag.end.xml.xul
          pop: true
        - include: tag-stuff

  preprocessor:
    - match: ^(#include)\b
      scope: meta.preprocessor.include.xml.xul keyword.control.import.xml.xul
      push:
        - meta_scope: meta.preprocessor.include.xml.xul
        - match: '\S'
          scope: punctuation.definition.string.begin.xml.xul
        - match: '\n'
          scope: punctuation.definition.string.end.xml.xul
          pop: true
    - match: '^#\s'
      scope: punctuation.definition.comment.xml.xul
      push:
        - meta_scope: comment.line.preprocessor.xml.xul
        - match: \n
          pop: true
    - match: ^#(if|ifn?def|else|endif)\b
      scope: meta.preprocessor.conditional.xml.xul keyword.control.import.xml.xul
      push:
        - match: '\n'
          scope: punctuation.definition.string.end.xml.xul
          pop: true
    - match: ^#(define|undef)\b
      scope: meta.preprocessor.define.xml.xul keyword.control.import.xml.xul
      push:
        - match: '\n'
          scope: punctuation.definition.string.end.xml.xul
          pop: true

  comment:
    - match: <!--
      captures:
        0: punctuation.definition.comment.xml.xul
      push:
        - meta_scope: comment.block.xml.xul
        - match: '--\s*>'
          captures:
            0: punctuation.definition.comment.xml.xul
          pop: true
        - match: "--"
          scope: invalid.illegal.bad-comments-or-CDATA.xml.xul

  internal-subset:
    - match: \[
      scope: punctuation.definition.constant.xml.xul
      push:
        - meta_scope: meta.internalsubset.xml.xul
        - match: \]
          scope: punctuation.definition.constant.xml.xul
          pop: true
        - include: comment
        - include: entity-decl
        - include: element-decl
        - include: attlist-decl
        - include: notation-decl
        - include: parameter-entity

  entity-decl:
    - match: '(<!)(ENTITY)\s+(%\s+)?({{name}})(\s+(?:SYSTEM|PUBLIC)\s+)?'
      captures:
        1: punctuation.definition.tag.begin.xml.xul
        2: keyword.entity.xml.xul
        3: punctuation.definition.entity.xml.xul
        4: variable.entity.xml.xul
        5: keyword.entitytype.xml.xul
      push:
        - match: '>'
          scope: punctuation.definition.tag.end.xml.xul
          pop: true
        - include: string-double-quoted
        - include: string-single-quoted

  element-decl:
    - match: '(<!)(ELEMENT)\s+({{name}})\s+'
      captures:
        1: punctuation.definition.tag.begin.xml.xul
        2: keyword.element.xml.xul
        3: variable.element.xml.xul
      push:
        - match: '>'
          scope: punctuation.definition.tag.end.xml.xul
          pop: true
        - match: '\b(EMPTY|ANY)\b'
          scope: constant.other.xml.xul
        - include: element-parens

  element-parens:
    - match: \(
      scope: punctuation.definition.group.xml.xul
      push:
        - match: (\))([*?+])?
          captures:
            1: punctuation.definition.group.xml.xul
            2: keyword.operator.xml.xul
          pop: true
        - match: '#PCDATA'
          scope: constant.other.xml.xul
        - match: '[*?+]'
          scope: keyword.operator.xml.xul
        - match: '[,|]'
          scope: punctuation.separator.xml.xul
        - include: element-parens

  attlist-decl:
    - match: '(<!)(ATTLIST)\s+({{name}})\s+({{name}})'
      captures:
        1: punctuation.definition.tag.begin.xml.xul
        2: keyword.attlist.xml.xul
        3: variable.element.xml.xul
        4: variable.attribute-name.xml.xul
      push:
        - match: '>'
          scope: punctuation.definition.tag.end.xml.xul
          pop: true
        - include: string-double-quoted
        - include: string-single-quoted

  notation-decl:
    - match: '(<!)(NOTATION)\s+({{name}})'
      captures:
        1: punctuation.definition.tag.begin.xml.xul
        2: keyword.notation.xml.xul
        3: variable.notation.xml.xul
      push:
        - match: '>'
          scope: punctuation.definition.tag.end.xml.xul
          pop: true
        - include: string-double-quoted
        - include: string-single-quoted

  parameter-entity:
    - match: '(%){{name}}(;)'
      scope: constant.character.parameter-entity.xml.xul
      captures:
        1: punctuation.definition.constant.xml.xul
        2: punctuation.definition.constant.xml.xul

  entities:
    - match: '(&)([a-zA-Z0-9.]+|#[0-9]+|#x[0-9a-fA-F]+)(;)'
      scope: constant.character.entity.xml.xul
      captures:
        1: punctuation.definition.entity.xml.xul
        3: punctuation.definition.entity.xml.xul

  js-extra-comments:
    - meta_scope: meta.embedded.script.xml.xul
    - match: '<!\[CDATA\['
      scope: comment.other.xml.xul
    - match: '\]\]>'
      scope: comment.other.xml.xul
    - include: comment

  string-double-quoted:
    - match: '"'
      captures:
        0: punctuation.definition.string.begin.xml.xul
      push:
        - meta_scope: string.quoted.double.xml.xul
        - match: '"'
          captures:
            0: punctuation.definition.string.end.xml.xul
          pop: true
        - include: entities

  string-single-quoted:
    - match: "'"
      captures:
        0: punctuation.definition.string.begin.xml.xul
      push:
        - meta_scope: string.quoted.single.xml.xul
        - match: "'"
          captures:
            0: punctuation.definition.string.end.xml.xul
          pop: true
        - include: entities

  readonly-attribute:
    - match: '(?:\s+|^)(readonly)\s*(=)\s*(")(?:(true|false)|([^"]*?))(")'
      captures:
        1: entity.other.attribute-name.localname.xml.xul
        2: punctuation.separator.key-value.xml.xul
        3: punctuation.definition.string.begin.xml.xul
        4: variable.language.xml.xul
        5: invalid.illegal
        6: punctuation.definition.string.end.xml.xul

  xul-bool-attributes:
    - match: |-
        (?x)
          (?:\s+|^)(
            # Boolean xul attributes. This was generated by a shell script and
            # isn't really a sane set of things to give special highlight
            # treatment. Oh well.
            activateontab|allow(?:events|underflowscroll)|animate|ascending|
            auto(?:check|hide|scroll)|branded|button(?:disabledaccept|highlight)|
            (?:checkbox|closebutton|dropmarker|grippy)?hidden|checked|click(?:SelectsAll|toscroll)|
            collapsed|commandupdater|complete(?:default|selected)index|consumeoutsideclicks|
            container|content(?:editable|titlesetting)|customizable|cycler|delayprefsave|
            descriptionheightworkaround|disable(?:d|fastfind|fullscreen|(?:global)?history|keynav|security)|
            editable|enable(?:ColumnDrag|history)|fadein|firstpage|flatList|focused|
            fullscreen(?:button|toolbar)|handleCtrlTab|
            hide(?:chrome|columnpicker|header|ifnoinsertionpoint|ifprivatebrowsing|spinbuttons)|
            ignoreincolumnpicker|indicator|inheritstyle|inwindowmenu|isCurrentSortCol|
            keepbroadcastattributeswhencustomizing|layer|minimal|movetoclick|mozbrowser|multiline|
            no(?:auto(?:focus|hide)|duration|icon|(?:initial|restore)|focus|maxresults|preventnavboxhide|rolluponanhor)|
            overflow(?:able|s)|open|page|paused|photon|pinned|placespopup|popup(?:only|sinherittooltip)|
            pressed|primary|private|readonly|remote|remov(?:able|eelement)|reserved|resizable|
            rolluponmousewheel|scoped|search(?:button)?|select(?:able|ed|firstnode)|setfocus|
            showcaret|skipintoolbarset|smoothscroll|sortable|spellcheck|standalone|
            subpanel|tabs(?:crolling|intitlebar|pecific)|toggletoolbar|topmost|treelines|
            useoriginprincipal|visuallyselected|wrap
          )\s*(=)\s*(")(?:(true|false)|([^"]*?))(")
      captures:
        1: entity.other.attribute-name.localname.xml.xul
        2: punctuation.separator.key-value.xml.xul
        3: punctuation.definition.string.begin.xml.xul
        4: variable.language.xml.xul
        5: invalid.illegal
        6: punctuation.definition.string.end.xml.xul

  xul-enum-attributes:
    - match: '(?:\s+|^)(align)\s*(=)\s*(")(?:(start|center|end|baseline|stretch|left|right)|([^"]*?))(")'
      captures:
        1: entity.other.attribute-name.localname.xml.xul
        2: punctuation.separator.key-value.xml.xul
        3: punctuation.definition.string.begin.xml.xul
        4: support.constant.xml.xul
        5: invalid.illegal
        6: punctuation.definition.string.end.xml.xul
    - match: '(?:\s+|^)(orient)\s*(=)\s*(")(?:(horizontal|vertical))(")'
      captures:
        1: entity.other.attribute-name.localname.xml.xul
        2: punctuation.separator.key-value.xml.xul
        3: punctuation.definition.string.begin.xml.xul
        4: support.constant.xml.xul
        5: punctuation.definition.string.end.xml.xul
    - match: '(?:\s+|^)(dir)\s*(=)\s*(")(?:(left|right|top(?:left|right)?|bottom(?:start|end|left|right)?|rtl|ltr|reverse))(")'
      captures:
        1: entity.other.attribute-name.localname.xml.xul
        2: punctuation.separator.key-value.xml.xul
        3: punctuation.definition.string.begin.xml.xul
        4: support.constant.xml.xul
        5: punctuation.definition.string.end.xml.xul
    - match: '(?:\s+|^)(pack)\s*(=)\s*(")(?:(start|center|end))(")'
      captures:
        1: entity.other.attribute-name.localname.xml.xul
        2: punctuation.separator.key-value.xml.xul
        3: punctuation.definition.string.begin.xml.xul
        4: support.constant.xml.xul
        5: punctuation.definition.string.end.xml.xul
    - match: '(?:\s+|^)(crop)\s*(=)\s*(")(left|none|start|center|right|end)(")'
      captures:
        1: entity.other.attribute-name.localname.xml.xul
        2: punctuation.separator.key-value.xml.xul
        3: punctuation.definition.string.begin.xml.xul
        4: support.constant.xml.xul
        5: punctuation.definition.string.end.xml.xul
    - match: '(?:\s+|^)(sizemode)\s*(=)\s*(")(maximized|normal|fullscreen)(")'
      captures:
        1: entity.other.attribute-name.localname.xml.xul
        2: punctuation.separator.key-value.xml.xul
        3: punctuation.definition.string.begin.xml.xul
        4: support.constant.xml.xul
        5: punctuation.definition.string.end.xml.xul

  xul-numeric-attributes:
    - match: '(?:\s+|^)((?:max|min)(?:width|height)|screen[XY]|left|top|start|bottom|right|end)\s*(=)\s*(")'
      captures:
        1: entity.other.attribute-name.localname.xml.xul
        2: punctuation.separator.key-value.xml.xul
        3: punctuation.definition.string.begin.xml.xul
      push:
        - match: '"'
          scope: punctuation.definition.string.begin.xml.xul
          pop: true
        - include: entities
        - match: '[-+]?\d+(?:px)?'
          scope: constant.numeric.xml.xul
    - match: '(?:\s+|^)(flex)\s*(=)\s*(")([-]?\d+)(")'
      captures:
        1: entity.other.attribute-name.localname.xml.xul
        2: punctuation.separator.key-value.xml.xul
        3: punctuation.definition.string.begin.xml.xul
        4: support.constant.xml.xul
        5: punctuation.definition.string.end.xml.xul

  style-attribute:
    - match: '(?:\s+|^)(style)\s*(=)\s*(")'
      captures:
        1: entity.other.attribute-name.localname.xml.xul
        2: punctuation.separator.key-value.xml.xul
        3: punctuation.definition.string.begin.xml.xul
      push:
        - include: CSS.sublime-syntax#rule-list-body
      with_prototype:
        - match: '"'
          scope: punctuation.definition.string.begin.xml.xul
          pop: true

  xbl-special-attributes:
    - include: readonly-attribute

  tag-generic-attribute:
    - match: '(?:\s+|^){{qualified_name}}\s*(=)'
      captures:
        1: entity.other.attribute-name.namespace.xml.xul
        2: entity.other.attribute-name.xml.xul punctuation.separator.namespace.xml.xul
        3: entity.other.attribute-name.localname.xml.xul
        4: punctuation.separator.key-value.xml.xul
    - match: '(?:\s+|^)([[:alnum:]:_.-]+)\s*(=)'
      captures:
        1: invalid.illegal.bad-attribute-name.xml.xul
        2: punctuation.separator.key-value.xml.xul

  event-attributes:
    - match: '(?:\s+|^)(?:([[:alpha:]_][[:alnum:]_.-]*)(:))?(on[[:alnum:]_.-]*)\s*(=)\s*(")'
      captures:
        1: entity.other.attribute-name.namespace.xml.xul
        2: entity.other.attribute-name.xml.xul punctuation.separator.namespace.xml.xul
        3: entity.other.attribute-name.localname.xml.xul
        4: punctuation.separator.key-value.xml.xul
        5: punctuation.definition.string.begin.xml.xul
      push:
        - meta_scope: meta.attribute.embed_script.xml.xul
        - match: '"'
          captures:
            0: punctuation.definition.string.end.xml.xul
          pop: true
        - include: scope:source.js

  tag-stuff:
    - include: xul-bool-attributes
    - include: xul-enum-attributes
    - include: xul-numeric-attributes
    - include: style-attribute
    - include: event-attributes
    - include: tag-generic-attribute
    - include: string-double-quoted
    - include: string-single-quoted
    - include: preprocessor
